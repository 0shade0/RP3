using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing;

namespace Pacman
{
    public class Grid
    {
        // Igraća ploča se sastoji od 36 x 28 kvadratića.
        // # = zidovi, - = ništa, * = kolačić, o = super kolačić.
        private char[,] originalMap = new char[36, 28]
        {
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','*','*','*','*','*','*','*','*','*','*','*','*','#','#','*','*','*','*','*','*','*','*','*','*','*','*','#' },
            { '#','*','#','#','#','#','*','#','#','#','#','#','*','#','#','*','#','#','#','#','#','*','#','#','#','#','*','#' },
            { '#','o','#','#','#','#','*','#','#','#','#','#','*','#','#','*','#','#','#','#','#','*','#','#','#','#','o','#' },
            { '#','*','#','#','#','#','*','#','#','#','#','#','*','#','#','*','#','#','#','#','#','*','#','#','#','#','*','#' },
            { '#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#' },
            { '#','*','#','#','#','#','*','#','#','*','#','#','#','#','#','#','#','#','*','#','#','*','#','#','#','#','*','#' },
            { '#','*','#','#','#','#','*','#','#','*','#','#','#','#','#','#','#','#','*','#','#','*','#','#','#','#','*','#' },
            { '#','*','*','*','*','*','*','#','#','*','*','*','*','#','#','*','*','*','*','#','#','*','*','*','*','*','*','#' },
            { '#','#','#','#','#','#','*','#','#','#','#','#','*','#','#','*','#','#','#','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','#','#','#','*','#','#','*','#','#','#','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','-','-','-','-','-','-','-','-','-','-','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','-','#','#','#','#','#','#','#','#','-','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','-','#','#','#','#','#','#','#','#','-','#','#','*','#','#','#','#','#','#' },
            { '*','*','*','*','*','*','*','*','*','-','#','#','#','#','#','#','#','#','-','*','*','*','*','*','*','*','*','*' },
            { '#','#','#','#','#','#','*','#','#','-','#','#','#','#','#','#','#','#','-','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','-','#','#','#','#','#','#','#','#','-','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','-','-','-','-','-','-','-','-','-','-','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','-','#','#','#','#','#','#','#','#','-','#','#','*','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','*','#','#','-','#','#','#','#','#','#','#','#','-','#','#','*','#','#','#','#','#','#' },
            { '#','*','*','*','*','*','*','*','*','*','*','*','*','#','#','*','*','*','*','*','*','*','*','*','*','*','*','#' },
            { '#','*','#','#','#','#','*','#','#','#','#','#','*','#','#','*','#','#','#','#','#','*','#','#','#','#','*','#' },
            { '#','*','#','#','#','#','*','#','#','#','#','#','*','#','#','*','#','#','#','#','#','*','#','#','#','#','*','#' },
            { '#','o','*','*','#','#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#','#','*','*','o','#' },
            { '#','#','#','*','#','#','*','#','#','*','#','#','#','#','#','#','#','#','*','#','#','*','#','#','*','#','#','#' },
            { '#','#','#','*','#','#','*','#','#','*','#','#','#','#','#','#','#','#','*','#','#','*','#','#','*','#','#','#' },
            { '#','*','*','*','*','*','*','#','#','*','*','*','*','#','#','*','*','*','*','#','#','*','*','*','*','*','*','#' },
            { '#','*','#','#','#','#','#','#','#','#','#','#','*','#','#','*','#','#','#','#','#','#','#','#','#','#','*','#' },
            { '#','*','#','#','#','#','#','#','#','#','#','#','*','#','#','*','#','#','#','#','#','#','#','#','#','#','*','#' },
            { '#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' }
        };
        // Za lakše testiranje.
        private char[,] testMap = new char[36, 28] 
        {
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','-','-','-','-','-','-','-','-','-','-','-','-','#','#','-','-','-','-','-','-','-','-','-','-','-','-','#' },
            { '#','-','#','#','#','#','-','#','#','#','#','#','-','#','#','-','#','#','#','#','#','-','#','#','#','#','-','#' },
            { '#','-','#','#','#','#','-','#','#','#','#','#','-','#','#','-','#','#','#','#','#','-','#','#','#','#','-','#' },
            { '#','-','#','#','#','#','-','#','#','#','#','#','-','#','#','-','#','#','#','#','#','-','#','#','#','#','-','#' },
            { '#','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','#' },
            { '#','-','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','-','#' },
            { '#','-','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','-','#' },
            { '#','-','-','-','-','-','-','#','#','-','-','-','-','#','#','-','-','-','-','#','#','-','-','-','-','-','-','#' },
            { '#','#','#','#','#','#','-','#','#','#','#','#','-','#','#','-','#','#','#','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','#','#','#','-','#','#','-','#','#','#','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','-','-','-','-','-','-','-','-','-','-','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#' },
            { '-','-','-','-','-','-','-','-','-','-','#','#','#','#','#','#','#','#','-','-','-','-','-','-','-','-','-','-' },
            { '#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','-','-','-','-','-','-','-','-','-','-','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#' },
            { '#','-','-','-','-','-','-','-','-','-','-','-','-','#','#','-','-','-','-','-','-','-','-','-','-','-','-','#' },
            { '#','-','#','#','#','#','-','#','#','#','#','#','-','#','#','-','#','#','#','#','#','-','#','#','#','#','-','#' },
            { '#','-','#','#','#','#','-','#','#','#','#','#','-','#','#','-','#','#','#','#','#','-','#','#','#','#','-','#' },
            { '#','-','-','-','#','#','-','-','o','*','-','-','-','-','-','-','-','-','-','-','-','-','#','#','-','-','-','#' },
            { '#','#','#','-','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','-','#','#','#' },
            { '#','#','#','-','#','#','-','#','#','-','#','#','#','#','#','#','#','#','-','#','#','-','#','#','-','#','#','#' },
            { '#','-','-','-','-','-','-','#','#','-','-','-','-','#','#','-','-','-','-','#','#','-','-','-','-','-','-','#' },
            { '#','-','#','#','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','#','#','-','#' },
            { '#','-','#','#','#','#','#','#','#','#','#','#','-','#','#','-','#','#','#','#','#','#','#','#','#','#','-','#' },
            { '#','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' },
            { '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#' }
        };
        // Po jedan PictureBox za svaki element ploče.
        private char[,] map = new char[36, 28];
        private PictureBox[,] gridPictureBoxes = new PictureBox[36, 28];
        private int cntCookies;

        public Grid(Form form, Point startPoint)
        {
            // Ispod Pacmana nema ničeg.
            originalMap[startPoint.Y, startPoint.X] = '-';
            for (int i = 0; i < 36; i++)
                for (int j = 0; j < 28; j++)
                    map[i, j] = originalMap[i, j];

            for (int i = 0; i < 36; i++)
            {
                for (int j = 0; j < 28; j++)
                {
                    char contains = map[i, j];

                    gridPictureBoxes[i, j] = new PictureBox();
                    gridPictureBoxes[i, j].Size = new Size(Form1.squareSize.X, Form1.squareSize.Y);
                    gridPictureBoxes[i, j].Location = new Point(j * Form1.squareSize.X, i * Form1.squareSize.Y);

                    switch (contains)
                    {
                        case '#': // Zid.
                            gridPictureBoxes[i, j].BackColor = Color.DarkBlue;
                            break;
                        case '*': // Kolačić.
                            ++cntCookies;
                            gridPictureBoxes[i, j].Image = Properties.Resources.cookieImage;
                            break;
                        case 'o': // Super-kolačić.
                            ++cntCookies;
                            gridPictureBoxes[i, j].Image = Properties.Resources.superCookieImage;
                            break;
                    }
                    form.Controls.Add(gridPictureBoxes[i, j]);
                }
            }
        }

        public void resetGrid()
        {
            for (int i = 0; i < 36; i++)
                for (int j = 0; j < 28; j++)
                {
                    map[i, j] = originalMap[i, j];
                    redrawSquare(i, j);
                }
            updateCookieNumber();
        }

        public void redrawSquare(int i, int j)
        {
            char contains = map[i, j];

            switch (contains)
            {
                case '-':
                    gridPictureBoxes[i, j].Image = null;
                    gridPictureBoxes[i, j].BackColor = Color.Black;
                    break;
                case '#': // Zid.
                    gridPictureBoxes[i, j].Image = null;
                    gridPictureBoxes[i, j].BackColor = Color.DarkBlue;
                    break;
                case '*': // Kolačić.
                    gridPictureBoxes[i, j].Image = Properties.Resources.cookieImage;
                    break;
                case 'o': // Super-kolačić.
                    gridPictureBoxes[i, j].Image = Properties.Resources.superCookieImage;
                    break;
            }
        }
        public bool noMoreCookies()
        {
            return cntCookies == 0;
        }
        public char getSquareValue(int i, int j)
        {
            return map[i, j];
        }
        
        public void updateCookieNumber()
        {
            int cnt = 0;
            for (int i = 0; i < 36; i++)
                for (int j = 0; j < 28; j++)
                    if (map[i, j] == '*' || map[i, j] == 'o')
                        ++cnt;
            cntCookies = cnt;
        }

        public void decrementCntCookie()
        {
            --cntCookies;
        }

        public void clearSquare(int i, int j)
        {
            map[i, j] = '-';
            redrawSquare(i, j);
        }
    }
}
